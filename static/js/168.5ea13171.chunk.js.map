{"version":3,"file":"static/js/168.5ea13171.chunk.js","mappings":"gMACA,GAAiB,E,6CCkCjB,EA7BgB,WACd,IAAQA,EAAqCC,EAAAA,KAA/BC,EAA+BD,EAAAA,KAAzBE,EAAyBF,EAAAA,MAAlBG,EAAkBH,EAAAA,QAATI,EAASJ,EAAAA,KACrCK,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA8BE,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KAMA,OAJAC,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,mBAAkBN,EAASI,GAAYG,MAAMC,QAAQC,MACtD,GAAE,CAACT,KAGF,oBAASU,UAAWZ,EAApB,SACGK,EAAQQ,OAAS,GAChB,cAAGD,UAAU,QAAb,mDAEA,eAAIA,UAAWhB,EAAf,SACGS,EAAQS,KAAI,YAA0B,IAAvBC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QACtB,OACE,gBAAIJ,UAAWd,EAAf,WACE,eAAIc,UAAWb,EAAf,SAAuBgB,KACvB,cAAGH,UAAWX,EAAd,SAAqBe,OAFGC,EAAAA,EAAAA,MAK7B,OAKV,C,qFChCM,IAkBIA,EAAS,eAACC,EAAD,uDAAQ,GAAR,OAClBC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,SAACC,EAAIC,GAWvD,OARED,IAFFC,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAGT,GAAE,GAbe,C","sources":["components/Reviews/Reviews.module.css","components/Reviews/Reviews.jsx","../node_modules/nanoid/index.browser.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {};","import styles from './Reviews.module.css';\nimport React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchMovieReviews } from 'utils/apiSupport';\nimport { nanoid } from 'nanoid';\n\nconst Reviews = () => {\n  const { list, item, title, wrapper, text } = styles;\n  const { movieId } = useParams();\n  const [reviews, setReviews] = useState([]);\n\n  useEffect(() => {\n    fetchMovieReviews(movieId, setReviews).catch(console.error);\n  }, [movieId]);\n\n  return (\n    <section className={wrapper}>\n      {reviews.length < 1 ? (\n        <p className=\"error\">Sorry, the reviews is not available!</p>\n      ) : (\n        <ul className={list}>\n          {reviews.map(({ author, content }) => {\n            return (\n              <li className={item} key={nanoid()}>\n                <h4 className={title}>{author}</h4>\n                <p className={text}>{content}</p>\n              </li>\n            );\n          })}\n        </ul>\n      )}\n    </section>\n  );\n};\n\nexport default Reviews;","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["list","styles","item","title","wrapper","text","movieId","useParams","useState","reviews","setReviews","useEffect","fetchMovieReviews","catch","console","error","className","length","map","author","content","nanoid","size","crypto","getRandomValues","Uint8Array","reduce","id","byte","toString","toUpperCase"],"sourceRoot":""}