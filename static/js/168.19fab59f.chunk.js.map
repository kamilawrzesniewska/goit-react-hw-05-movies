{"version":3,"file":"static/js/168.19fab59f.chunk.js","mappings":"gMACA,GAAiB,E,6CCkCjB,EA7BgB,WACd,IAAQA,EAAqCC,EAAAA,KAA/BC,EAA+BD,EAAAA,KAAzBE,EAAyBF,EAAAA,MAAlBG,EAAkBH,EAAAA,QAATI,EAASJ,EAAAA,KACrCK,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA8BE,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KAMA,OAJAC,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,IAAkBN,EAASI,GAAYG,MAAMC,QAAQC,MACtD,GAAE,CAACT,KAGF,oBAASU,UAAWZ,EAApB,SACGK,EAAQQ,OAAS,GAChB,cAAGD,UAAU,QAAb,mDAEA,eAAIA,UAAWhB,EAAf,SACGS,EAAQS,KAAI,YAA0B,IAAvBC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QACtB,OACE,gBAAIJ,UAAWd,EAAf,WACE,eAAIc,UAAWb,EAAf,SAAuBgB,KACvB,cAAGH,UAAWX,EAAd,SAAqBe,OAFGC,EAAAA,EAAAA,MAK7B,OAKV,C,6LC/BKC,EAAU,mCACVC,EAAW,gCAIXC,EAAiB,mCAAG,WAAMC,GAAN,gGAECC,EAAAA,GAAAA,IAAA,UAClBH,EADkB,sCACoBD,IAHrB,cAEhBK,EAFgB,yBAMfF,EAAUE,EAASC,KAAKC,UANT,gCAQtBf,QAAQgB,IAAR,UAAe,KAAMC,KAArB,aAA8B,KAAMC,UARd,yDAAH,sDAcjBC,EAAc,mCAAG,WAAO3B,EAAS4B,GAAhB,gGAEIR,EAAAA,GAAAA,IAAA,UAClBH,EADkB,iBACDjB,EADC,oBACkBgB,EADlB,oBAFJ,cAEbK,EAFa,yBAMZO,EAASP,EAASC,OANN,gCAQnBd,QAAQgB,IAAR,UAAe,KAAMC,KAArB,aAA8B,KAAMC,UARjB,yDAAH,wDAcdG,EAAc,mCAAG,WAAO7B,EAAS8B,GAAhB,gGAEIV,EAAAA,GAAAA,IAAA,UAClBH,EADkB,iBACDjB,EADC,4BAC0BgB,EAD1B,oBAFJ,cAEbK,EAFa,yBAMZS,EAAQT,EAASC,KAAKS,OANV,gCAQnBvB,QAAQgB,IAAR,UAAe,KAAMC,KAArB,aAA8B,KAAMC,UARjB,yDAAH,wDAcdpB,EAAiB,mCAAG,WAAON,EAASI,GAAhB,gGAECgB,EAAAA,GAAAA,IAAA,UAClBH,EADkB,iBACDjB,EADC,4BAC0BgB,EAD1B,oBAFD,cAEhBK,EAFgB,yBAMfjB,EAAWiB,EAASC,KAAKC,UANV,gCAQtBf,QAAQgB,IAAR,UAAe,KAAMC,KAArB,aAA8B,KAAMC,UARd,yDAAH,wDAcjBM,EAAiB,mCAAG,WAAOC,EAAOC,GAAd,kGAECd,EAAAA,GAAAA,IAAA,UAClBH,EADkB,gCACcD,EADd,kBAC+BiB,EAD/B,gCAFD,cAEhBZ,EAFgB,OAKhBC,EAAOD,EAASC,KAAKC,QALL,kBAMfW,EAAkBZ,IANH,gCAQtBd,QAAQgB,IAAR,UAAe,KAAMC,KAArB,aAA8B,KAAMC,UARd,yDAAH,uD,uDC9DhB,IAkBIX,EAAS,eAACoB,EAAD,uDAAQ,GAAR,OAClBC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,SAACC,EAAIC,GAWvD,OARED,IAFFC,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAGT,GAAE,GAbe,C","sources":["components/Reviews/Reviews.module.css","components/Reviews/Reviews.jsx","utils/apiSupport.js","../node_modules/nanoid/index.browser.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {};","import styles from './Reviews.module.css';\nimport React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchMovieReviews } from 'utils/apiSupport';\nimport { nanoid } from 'nanoid';\n\nconst Reviews = () => {\n  const { list, item, title, wrapper, text } = styles;\n  const { movieId } = useParams();\n  const [reviews, setReviews] = useState([]);\n\n  useEffect(() => {\n    fetchMovieReviews(movieId, setReviews).catch(console.error);\n  }, [movieId]);\n\n  return (\n    <section className={wrapper}>\n      {reviews.length < 1 ? (\n        <p className=\"error\">Sorry, the reviews is not available!</p>\n      ) : (\n        <ul className={list}>\n          {reviews.map(({ author, content }) => {\n            return (\n              <li className={item} key={nanoid()}>\n                <h4 className={title}>{author}</h4>\n                <p className={text}>{content}</p>\n              </li>\n            );\n          })}\n        </ul>\n      )}\n    </section>\n  );\n};\n\nexport default Reviews;","import axios from 'axios';\n\nconst API_KEY = 'df53404ad79b05696f1c854db3da46e1';\nconst BASE_URL = 'https://api.themoviedb.org/3/';\n\n// fetching function for the most popular movies of the day\n\nconst fetchTrendyMovies = async setMovies => {\n  try {\n    const response = await axios.get(\n      `${BASE_URL}trending/movie/day?api_key=${API_KEY}`\n    );\n\n    return setMovies(response.data.results);\n  } catch (error) {\n    console.log(`${error.name}: ${error.message}`);\n  }\n};\n\n// fetching function the movie by id\n\nconst fetchMovieById = async (movieId, setMovie) => {\n  try {\n    const response = await axios.get(\n      `${BASE_URL}movie/${movieId}?api_key=${API_KEY}&language=en-US`\n    );\n\n    return setMovie(response.data);\n  } catch (error) {\n    console.log(`${error.name}: ${error.message}`);\n  }\n};\n\n// fetching characters in the movie by the id of the movie\n\nconst fetchMovieCast = async (movieId, setCast) => {\n  try {\n    const response = await axios.get(\n      `${BASE_URL}movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`\n    );\n\n    return setCast(response.data.cast);\n  } catch (error) {\n    console.log(`${error.name}: ${error.message}`);\n  }\n};\n\n// fetching reviews about the movie by the id of the movie\n\nconst fetchMovieReviews = async (movieId, setReviews) => {\n  try {\n    const response = await axios.get(\n      `${BASE_URL}movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US`\n    );\n\n    return setReviews(response.data.results);\n  } catch (error) {\n    console.log(`${error.name}: ${error.message}`);\n  }\n};\n\n// fetching the movies by query\n\nconst fetchMovieByQuery = async (query, setSearchedMovies) => {\n  try {\n    const response = await axios.get(\n      `${BASE_URL}search/movie?api_key=${API_KEY}&query=${query}&page=1&include_adult=false`\n    );\n    const data = response.data.results;\n    return setSearchedMovies(data);\n  } catch (error) {\n    console.log(`${error.name}: ${error.message}`);\n  }\n};\n\nexport {\n  fetchMovieById,\n  fetchTrendyMovies,\n  fetchMovieCast,\n  fetchMovieReviews,\n  fetchMovieByQuery,\n};","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["list","styles","item","title","wrapper","text","movieId","useParams","useState","reviews","setReviews","useEffect","fetchMovieReviews","catch","console","error","className","length","map","author","content","nanoid","API_KEY","BASE_URL","fetchTrendyMovies","setMovies","axios","response","data","results","log","name","message","fetchMovieById","setMovie","fetchMovieCast","setCast","cast","fetchMovieByQuery","query","setSearchedMovies","size","crypto","getRandomValues","Uint8Array","reduce","id","byte","toString","toUpperCase"],"sourceRoot":""}