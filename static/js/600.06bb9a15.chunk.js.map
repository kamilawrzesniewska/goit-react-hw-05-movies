{"version":3,"file":"static/js/600.06bb9a15.chunk.js","mappings":"sKACA,OAAiB,E,2BC2BjB,EAxBwB,SAAC,GAAgB,IAAdA,EAAa,EAAbA,OACnBC,GAAWC,EAAAA,EAAAA,MAEjB,GAAKF,EAEL,OACE,wBACGA,EAAOG,KAAI,SAAAC,GACV,OACE,eAAIC,UAAWC,EAAAA,KAAf,UACE,SAAC,KAAD,CAAMC,GAAE,UAAKH,EAAMI,IAAMC,MAAO,CAAEC,KAAMT,GAAxC,SACGG,EAAMO,SAFsBP,EAAMI,GAM1C,KAGN,C,6FCrBD,GAAiB,E,6CCAjB,GAAiB,E,kBCqBjB,EAjBkB,SAAC,GAAkB,IAAhBI,EAAe,EAAfA,SACXC,EAA+BP,EAAAA,KAAzBQ,EAAyBR,EAAAA,MAAlBS,EAAkBT,EAAAA,OAAVU,EAAUV,EAAAA,MAEvC,OACE,iBAAMD,UAAWQ,EAAMD,SAAU,SAAAK,GAAC,OAAIL,EAASK,EAAb,EAAlC,UACE,4BACE,kBAAsBZ,UAAWS,EAAOI,KAAK,OAAOC,KAAK,UAA7CC,EAAAA,EAAAA,QACZ,mBAAQF,KAAK,SAASb,UAAWU,EAAjC,UACE,iBAAMV,UAAWW,EAAjB,0BAKT,ECqCD,EA/CmB,WAAO,IAAD,EACfK,EAAcf,EAAAA,UAEhBgB,GAASC,EAAAA,EAAAA,MACf,GAA4CC,EAAAA,EAAAA,UAAS,IAArD,eAAOC,EAAP,KAAuBC,EAAvB,KACA,GAAwCF,EAAAA,EAAAA,UAAS,IAAjD,eAAOG,EAAP,KAAqBC,EAArB,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACMC,EAAK,UAAGF,EAAaG,IAAI,gBAApB,QAAgC,GAoB3C,OANAC,EAAAA,EAAAA,YAAU,WACJF,IACFG,EAAAA,EAAAA,mBAAkBH,EAAON,GAAmBU,MAAMC,QAAQC,MAE7D,GAAE,CAACN,KAGF,iBAAM3B,UAAWgB,EAAjB,SACGC,EAAOiB,SACN,+BACE,SAAC,KAAD,OAGF,iCACE,SAAC,EAAD,CAAW3B,SA1BF,SAAAK,GACfA,EAAEuB,iBACF,IAAM3B,EAAOI,EAAEwB,cACTC,EAAa7B,EAAK8B,SAASX,MAAMY,MACvC,GAAmB,KAAfF,EACF,OAAOd,EAAgB,oCAEzBG,EAAgB,CAAEC,MAAOU,IACzBd,EAAgB,IAChBf,EAAKgC,OACN,IAiBQlB,GACC,gBAAKtB,UAAU,QAAf,SAAwBsB,KAExB,SAACmB,EAAA,EAAD,CAAW9C,OAAQyB,QAM9B,C,qFCpDM,IAkBIL,EAAS,eAAC2B,EAAD,uDAAQ,GAAR,OAClBC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,SAAC3C,EAAI4C,GAWvD,OARE5C,IAFF4C,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAGT,GAAE,GAbe,C","sources":["components/MovieList/MovieList.module.css","components/MovieList/MovieList.jsx","pages/MoviesPage/MoviesPage.module.css","components/SearchBar/SearchBar.module.css","components/SearchBar/SearchBar.jsx","pages/MoviesPage/MoviesPage.jsx","../node_modules/nanoid/index.browser.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {};","import styles from './MovieList.module.css';\nimport { Link, useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nconst SearchMovieList = ({ movies }) => {\n  const location = useLocation();\n\n  if (!movies) return;\n\n  return (\n    <ul>\n      {movies.map(movie => {\n        return (\n          <li className={styles.item} key={movie.id}>\n            <Link to={`${movie.id}`} state={{ from: location }}>\n              {movie.title}\n            </Link>\n          </li>\n        );\n      })}\n    </ul>\n  );\n};\n\nSearchMovieList.propTypes = {\n  movies: PropTypes.array.isRequired,\n};\n\nexport default SearchMovieList;","// extracted by mini-css-extract-plugin\nexport default {};","// extracted by mini-css-extract-plugin\nexport default {};","import styles from './SearchBar.module.css';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { nanoid } from 'nanoid';\n\nconst SearchBar = ({ onSubmit }) => {\n  const { form, input, button, label } = styles;\n\n  return (\n    <form className={form} onSubmit={e => onSubmit(e)}>\n      <div>\n        <input key={nanoid()} className={input} type=\"text\" name=\"query\" />\n        <button type=\"submit\" className={button}>\n          <span className={label}>Search</span>\n        </button>\n      </div>\n    </form>\n  );\n};\n\nSearchBar.propTypes = { onSubmit: PropTypes.func };\n\nexport default SearchBar;","import styles from './MoviesPage.module.css';\nimport React, { useState, useEffect } from 'react';\nimport { Outlet, useParams, useSearchParams } from 'react-router-dom';\nimport { fetchMovieByQuery } from 'utils/apiSupport';\nimport MovieList from 'components/MovieList/MovieList';\nimport SearchBar from 'components/SearchBar/SearchBar';\n\n\nconst MoviesPage = () => {\n  const { container } = styles;\n\n  const params = useParams();\n  const [searchedMovies, setSearchedMovies] = useState([]);\n  const [errorMessage, setErrorMessage] = useState('');\n  const [searchParams, setSearchParams] = useSearchParams();\n  const query = searchParams.get('query') ?? '';\n\n  const onSubmit = e => {\n    e.preventDefault();\n    const form = e.currentTarget;\n    const queryValue = form.elements.query.value;\n    if (queryValue === '') {\n      return setErrorMessage('The search field cannot be empty');\n    }\n    setSearchParams({ query: queryValue });\n    setErrorMessage('');\n    form.reset();\n  };\n\n  useEffect(() => {\n    if (query) {\n      fetchMovieByQuery(query, setSearchedMovies).catch(console.error);\n    }\n  }, [query]);\n\n  return (\n    <main className={container}>\n      {params.movieId ? (\n        <>\n          <Outlet />\n        </>\n      ) : (\n        <>\n          <SearchBar onSubmit={onSubmit} />\n          {errorMessage ? (\n            <div className=\"error\">{errorMessage}</div>\n          ) : (\n            <MovieList movies={searchedMovies} />\n          )}\n        </>\n      )}\n    </main>\n  );\n};\n\nexport default MoviesPage;","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["movies","location","useLocation","map","movie","className","styles","to","id","state","from","title","onSubmit","form","input","button","label","e","type","name","nanoid","container","params","useParams","useState","searchedMovies","setSearchedMovies","errorMessage","setErrorMessage","useSearchParams","searchParams","setSearchParams","query","get","useEffect","fetchMovieByQuery","catch","console","error","movieId","preventDefault","currentTarget","queryValue","elements","value","reset","MovieList","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase"],"sourceRoot":""}