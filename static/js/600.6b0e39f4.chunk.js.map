{"version":3,"file":"static/js/600.6b0e39f4.chunk.js","mappings":"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","sources":["components/MovieList/MovieList.module.css","components/MovieList/MovieList.jsx","pages/MoviesPage/MoviesPage.module.css","components/SearchBar/SearchBar.module.css","components/SearchBar/SearchBar.jsx","pages/MoviesPage/MoviesPage.jsx","utils/apiSupport.js","../node_modules/nanoid/index.browser.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {};","import styles from './MovieList.module.css';\nimport placeholderImg from '../../components/img/xxclose.png';\nimport React from 'react';\nimport { Link, useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nconst MovieList = ({ movies }) => {\n  const { movie__item, movie__list, movie__title, movie__link } = styles;\n  const location = useLocation();\n\n  return (\n    <ul className={movie__list}>\n      {movies.map(({ title, id, poster_path }) => (\n        <li className={movie__item} key={id}>\n          <Link\n            className={movie__link}\n            to={`/movies/${id}`}\n            state={{ from: location }}\n          >\n            {poster_path ? (\n              <img\n                src={`https://image.tmdb.org/t/p/w500${poster_path}`}\n                alt={`Poster of ${title}`}\n              />\n            ) : (\n              <img src={placeholderImg} alt={`Placeholder`} />\n            )}\n            <p className={movie__title}>{title}</p>\n          </Link>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nMovieList.propTypes = {\n  movies: PropTypes.array,\n};\n\nexport default MovieList;","// extracted by mini-css-extract-plugin\nexport default {};","// extracted by mini-css-extract-plugin\nexport default {};","import styles from './SearchBar.module.css';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { nanoid } from 'nanoid';\n\nconst SearchBar = ({ onSubmit }) => {\n  const { form, input, button, label } = styles;\n\n  return (\n    <form className={form} onSubmit={e => onSubmit(e)}>\n      <div>\n        <input key={nanoid()} className={input} type=\"text\" name=\"query\" />\n        <button type=\"submit\" className={button}>\n          <span className={label}>Search</span>\n        </button>\n      </div>\n    </form>\n  );\n};\n\nSearchBar.propTypes = { onSubmit: PropTypes.func };\n\nexport default SearchBar;","import styles from './MoviesPage.module.css';\nimport React, { useState, useEffect } from 'react';\nimport { Outlet, useParams, useSearchParams } from 'react-router-dom';\nimport { fetchMovieByQuery } from 'utils/apiSupport';\nimport MovieList from 'components/MovieList/MovieList';\nimport SearchBar from 'components/SearchBar/SearchBar';\n\n\nconst MoviesPage = () => {\n  const { container } = styles;\n\n  const params = useParams();\n  const [searchedMovies, setSearchedMovies] = useState([]);\n  const [errorMessage, setErrorMessage] = useState('');\n  const [searchParams, setSearchParams] = useSearchParams();\n  const query = searchParams.get('query') ?? '';\n\n  const onSubmit = e => {\n    e.preventDefault();\n    const form = e.currentTarget;\n    const queryValue = form.elements.query.value;\n    if (queryValue === '') {\n      return setErrorMessage('The search field cannot be empty');\n    }\n    setSearchParams({ query: queryValue });\n    setErrorMessage('');\n    form.reset();\n  };\n\n  useEffect(() => {\n    if (query) {\n      fetchMovieByQuery(query, setSearchedMovies).catch(console.error);\n    }\n  }, [query]);\n\n  return (\n    <main className={container}>\n      {params.movieId ? (\n        <>\n          <Outlet />\n        </>\n      ) : (\n        <>\n          <SearchBar onSubmit={onSubmit} />\n          {errorMessage ? (\n            <div className=\"error\">{errorMessage}</div>\n          ) : (\n            <MovieList movies={searchedMovies} />\n          )}\n        </>\n      )}\n    </main>\n  );\n};\n\nexport default MoviesPage;","import axios from 'axios';\n\nconst API_KEY = 'df53404ad79b05696f1c854db3da46e1';\nconst BASE_URL = 'https://api.themoviedb.org/3/';\n\n// fetching function for the most popular movies of the day\n\nconst fetchTrendyMovies = async setMovies => {\n  try {\n    const response = await axios.get(\n      `${BASE_URL}trending/movie/day?api_key=${API_KEY}`\n    );\n\n    return setMovies(response.data.results);\n  } catch (error) {\n    console.log(`${error.name}: ${error.message}`);\n  }\n};\n\n// fetching function the movie by id\n\nconst fetchMovieById = async (movieId, setMovie) => {\n  try {\n    const response = await axios.get(\n      `${BASE_URL}movie/${movieId}?api_key=${API_KEY}&language=en-US`\n    );\n\n    return setMovie(response.data);\n  } catch (error) {\n    console.log(`${error.name}: ${error.message}`);\n  }\n};\n\n// fetching characters in the movie by the id of the movie\n\nconst fetchMovieCast = async (movieId, setCast) => {\n  try {\n    const response = await axios.get(\n      `${BASE_URL}movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`\n    );\n\n    return setCast(response.data.cast);\n  } catch (error) {\n    console.log(`${error.name}: ${error.message}`);\n  }\n};\n\n// fetching reviews about the movie by the id of the movie\n\nconst fetchMovieReviews = async (movieId, setReviews) => {\n  try {\n    const response = await axios.get(\n      `${BASE_URL}movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US`\n    );\n\n    return setReviews(response.data.results);\n  } catch (error) {\n    console.log(`${error.name}: ${error.message}`);\n  }\n};\n\n// fetching the movies by query\n\nconst fetchMovieByQuery = async (query, setSearchedMovies) => {\n  try {\n    const response = await axios.get(\n      `${BASE_URL}search/movie?api_key=${API_KEY}&query=${query}&page=1&include_adult=false`\n    );\n    const data = response.data.results;\n    return setSearchedMovies(data);\n  } catch (error) {\n    console.log(`${error.name}: ${error.message}`);\n  }\n};\n\nexport {\n  fetchMovieById,\n  fetchTrendyMovies,\n  fetchMovieCast,\n  fetchMovieReviews,\n  fetchMovieByQuery,\n};","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["movies","movie__item","styles","movie__list","movie__title","movie__link","location","useLocation","className","map","title","id","poster_path","to","state","from","src","alt","placeholderImg","onSubmit","form","input","button","label","e","type","name","nanoid","container","params","useParams","useState","searchedMovies","setSearchedMovies","errorMessage","setErrorMessage","useSearchParams","searchParams","setSearchParams","query","get","useEffect","fetchMovieByQuery","catch","console","error","movieId","preventDefault","currentTarget","queryValue","elements","value","reset","MovieList","API_KEY","BASE_URL","fetchTrendyMovies","setMovies","axios","response","data","results","log","message","fetchMovieById","setMovie","fetchMovieCast","setCast","cast","fetchMovieReviews","setReviews","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase"],"sourceRoot":""}